package user.jepsen;

import java.util.*;
import java.io.*;
import java.lang.*;

public interface Client {
    /**
     * This method should be used to first install a database server onto the given node, and then launch it so that it is ready to receive operations.
     */
    public Object setUpDatabase(String node);

    /**
     * Conversely to {@code setUpDatabase(Object, String)}, this method should first stop the database server, and then uninstall it.
     */
    public void teardownDatabase(String node);

    /**
     * The client is a connection to the server through which operations are sent (such as reads, writes, and compare and sets (CASs)).
     * @param args This argument should be changed according to user requirements. It should be the client instance that represents the pipe between user and server. 
     */
    public void teardownClient(Object args);

    /**
     * This method is used whenever the Jepsen daemon wants to send an operation to the cluster being tested.
     * The output of this method will be written to standard out in the terminal that the Jepsen test is being run.
     * @param inputValue This parameter can be different types, and is drawn from the {@code getValue(String)} method depending on the operation being performed. 
     * @return null, 0, or false to indicate that the operation being performed has failed, otherwise the output value of the successful operation.
     */
    public Object invokeClient(Object args, String opName, Object inputValue);

    /**
     * As the name suggests, the user should open a connection to the database cluster by constructing a client.
     * @param node The IP address of the cluster which the user should connect to.
     */
    public void openClient(String node);
    
    /**
     * This is chosen upon the initialization of the test. The user can currently choose from the two following options:
     * "partition-random-halves" or "partition-majorities-ring". These are different types of failure situations Jepsen can stimulate.
     */
    public String getNemesis();
 
    /**
     * Called by the Jepsen test to generate the name of the operation to be performed. Whether the operation generation is randomized or follows a specific pattern
     * is entirely up to the user.
     */
    public String generateOp();
    
    /**
     *  @return The input value for the corresponding operation generated by the user
     */
    public Object getValue(String opName);
}
